{"version":3,"file":"CqlParser.js","sourceRoot":"","sources":["../src/CqlParser.ts"],"names":[],"mappings":"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","sourcesContent":["import './cql-parser.cjs';\r\n\r\nimport {\r\n    CombinationOperator,\r\n    Expression,\r\n    Filter,\r\n    Operator,\r\n    PropertyType,\r\n    isFilter,\r\n    isGeoStylerFunction,\r\n    isOperator\r\n} from 'geostyler-style';\r\n\r\ntype PatternName = 'PROPERTY' | 'COMPARISON' | 'VALUE' | 'LOGICAL' | 'LPAREN' | 'RPAREN'\r\n    | 'SPATIAL' | 'NOT' | 'BETWEEN' | 'GEOMETRY' | 'END' | 'COMMA' | 'IS_NULL';\r\ntype CqlOperator = '=' | '<>' | '<' | '<=' | '>' | '>=' | 'LIKE' | 'BETWEEN' | 'IS NULL';\r\n\r\ntype OperatorsMap = {\r\n    [cqlOperator: string]: Operator;\r\n};\r\ntype CombinationOperatorsMap = {\r\n    [cqlOperator: string]: CombinationOperator;\r\n};\r\ntype OperatorsReverseMap = {\r\n    [cqlOperator: string]: CqlOperator;\r\n};\r\ntype CombinationOperatorsReverseMap = {\r\n    [cqlOperator: string]: 'AND' | 'OR';\r\n};\r\ntype PrecedenceMap = {\r\n    [name: string]: 1 | 2 | 3;\r\n};\r\n\r\nconst isString = (value: any) => typeof value === 'string';\r\n\r\nexport class CqlParser {\r\n\r\n    tokens: PatternName[] = [\r\n        'PROPERTY', 'COMPARISON', 'VALUE', 'LOGICAL'\r\n    ];\r\n\r\n    operatorsMap: OperatorsMap = {\r\n        '=': '==',\r\n        '<>': '!=',\r\n        '<': '<',\r\n        '<=': '<=',\r\n        '>': '>',\r\n        '>=': '>=',\r\n        LIKE: '*=',\r\n        BETWEEN: '<=x<='\r\n    };\r\n\r\n    operatorReverseMap: OperatorsReverseMap = {};\r\n\r\n    combinationOperatorsMap: CombinationOperatorsMap = {\r\n        AND: '&&',\r\n        OR: '||'\r\n    };\r\n\r\n    combinationOperatorsReverseMap: CombinationOperatorsReverseMap = {};\r\n\r\n    precedence: PrecedenceMap = {\r\n        RPAREN: 3,\r\n        LOGICAL: 2,\r\n        COMPARISON: 1\r\n    };\r\n\r\n    constructor() {\r\n        const {\r\n            combinationOperatorsMap,\r\n            combinationOperatorsReverseMap,\r\n            operatorsMap,\r\n            operatorReverseMap\r\n        } = this;\r\n\r\n        Object.keys(operatorsMap)\r\n            .forEach((operator: CqlOperator) => {\r\n                const value = operatorsMap[operator];\r\n                operatorReverseMap[value] = operator;\r\n            });\r\n\r\n        Object.keys(combinationOperatorsMap)\r\n            .forEach((combinationOperator: 'AND' | 'OR') => {\r\n                const value: CombinationOperator = combinationOperatorsMap[combinationOperator];\r\n                combinationOperatorsReverseMap[value] = combinationOperator;\r\n            });\r\n\r\n        this.read = this.read.bind(this);\r\n        this.write = this.write.bind(this);\r\n    }\r\n\r\n    read(text: string | undefined): Filter | Expression<PropertyType> | undefined {\r\n        try {\r\n            // @ts-expect-error cqlParser is defined in the window / global object - see cql-parser.cjs\r\n            return (typeof window !== 'undefined' ? window : global).cqlParser.parse(text);\r\n        } catch (e) {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    write(\r\n        filter: RegExp | Filter | Expression<PropertyType>,\r\n        isChild?: boolean\r\n    ): PropertyType {\r\n        const {\r\n            operatorReverseMap,\r\n            combinationOperatorsReverseMap,\r\n            write\r\n        } = this;\r\n\r\n        if (filter && isGeoStylerFunction(filter)) {\r\n            if (filter.name === 'pi' || filter.name === 'random') {\r\n                return filter.name;\r\n            } else {\r\n                const args = filter.args.map(a => this.write(a)).join(', ');\r\n                return `${filter.name}(${args})`;\r\n            }\r\n        }\r\n\r\n        // catch illegal filters\r\n        if (Array.isArray(filter)) {\r\n            if (filter.length < 2) {\r\n                return undefined;\r\n            }\r\n            if (!isOperator(filter[0])) {\r\n                throw new Error(`Can't encode: ${filter}`);\r\n            }\r\n        }\r\n\r\n        if (isFilter(filter)) {\r\n            const f = filter as string[];\r\n            const operator = f[0];\r\n            const cqlOperator = operatorReverseMap[operator];\r\n\r\n            switch (operator) {\r\n                case '!':\r\n                    // TODO this should be better typed, get rid of `as any`\r\n                    return `NOT ( ${write(f[1] as any)} )`;\r\n                case '&&':\r\n                case '||':\r\n                    let cqlFilter: string = '';\r\n                    const cqlCombinationOperator = combinationOperatorsReverseMap[operator];\r\n                    cqlFilter += f\r\n                        .slice(1)\r\n                        // TODO this should be better typed, get rid of `f: any`\r\n                        .map((part) => write(part, true))\r\n                        .join(` ${cqlCombinationOperator} `);\r\n                    if (isChild) {\r\n                        return `(${cqlFilter})`;\r\n                    } else {\r\n                        return cqlFilter;\r\n                    }\r\n                case '==':\r\n                case '*=':\r\n                case '!=':\r\n                case '<':\r\n                case '<=':\r\n                case '>':\r\n                case '>=':\r\n                    const valueIsString = isString(f[2]);\r\n                    let value = f[2];\r\n                    if (valueIsString) {\r\n                        value = `'${value}'`;\r\n                    }\r\n                    return `${f[1]} ${cqlOperator} ${value}`;\r\n                case '<=x<=':\r\n                    return `${f[1]} ${cqlOperator} ${this.write(f[2])} AND ${this.write(f[3])}`;\r\n                case undefined:\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return filter;\r\n    }\r\n\r\n}\r\n\r\nexport default CqlParser;\r\n"]}